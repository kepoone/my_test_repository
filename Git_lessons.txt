Add to man
1) git cherry-pick (https://www.youtube.com/watch?v=TZJxBSfR0NE&t=17s)
2) git rebase
3) git rebase -i (squash) https://www.youtube.com/watch?v=Ujkq0QqwWXk



Lesson_1
1. git config -l (показать ваш конфиг git для текущего пользователя)
2. git config --global user.name "Name LastName" (указывает ваше имя/фамилия в config файл)
3. git config --global user.email "email@email.com" (указывает ваш email в config файл)

Lesson_2
1. git init . (указываем рабочую область в текущей директории)
2. git add ./file1.txt (добавить в git file1.txt)
3. git reset ./file1.txt (отмена добавления в git файла file1.txt)
4. git commit -m "My initial commit? this is Version1.0" (сделать снимок)
5. git status (узнать статус)

Lesson_3
1. git checkout -- file.txt (отменяет изменения в последнем файле)
2. git log (история изменений, показывает номерх хэша, дату комита, кем сделн коммит)
3. git log --all (показывает все коммиты, во всех ветках)
4. git log -1 (последнее изменение)
5. git log -1 -p (последнее изменение детально)
6. git diff --staged (показывает какие изменения будут внесены перед коммитом)
7. git log --oneline (удобный вывод коммитов в 1у строку (хэш и коммит))

Lesson_4
1. git clone http://.../.git (делает локальную копию репозитория с удаленного репозитория)
2. git push origin (загрузка в удаленный репозиторий, где "origin" это это псевдоним для URL, 
из которого вы клонировали хранилище (то есть, его можно назвать как угодно))
3. git remote add origin http://.../.git (связывает локальный репозиторий с удаленным)
4. git remote -v (показывает с какого удаленного репозитория выгружается и загружается файл)
5. git remote show origin (подробная информация о удаленных репозиторях)
6. git remote set-url origin url://.../.git (смена репозитория)

Lesson_5
1. git tag v0.1 (создает тэг "v0.1" на последний коммит)
2. git push origin v0.1 (отправляет на удаленный репозиторий тег "v0.1" на последний коммит)

Lesson_6
1. git branch name_branch (создать указанную ветку)
2. git checkout name_branch (переключиться на указанную ветку)
3. git branch (посмотреть какие есть ветки)
4. git branch -d name_branch (удалить ветку если в нет изменений(комитов))
5. git branch -D name_branch (удалить ветку если даже есть изменения(комиты))
6. git checkout -b name_branch (создать и переключиться на указанную ветку)
7. git merge name_branch (соединяет ветку с указанной веткой)

Lesson_7
1. git commit --amend (редактировать описание последнего коммита)
2. git checkout номер_хэша (временно откатиться на комит который мы указали) Что бы вернуться к последнему коммиту, пишем "git checkout master"
3. git reset --hard HEAD~1 (откатиться на предыдущий коммит, 
где цифра(1) означает на сколько комитов назад откатиться (более поздние коммиты будут удалены))
4. git reset --soft HEAD~1 (перезапись предыдущего коммита, 
где цифра(1) означает на сколько комитов назад откатиться (более поздние коммиты будут удалены, но текущие данные буду сохранены))
5. git commit --amend (изменение наименовния последнего коммита)

Lesson_8
1. git push --set-upstream origin name_branch (создает в GitHub новую ветку, и добавляет её комит)
2. git push origin --delete name_branch (удаленно стирает с Gitub ветку (предварительно нужно удалить ветку локально, делать это надо с master-ветки))
3. //Что бы скачать ваш репозиторий с удаленными ветками вам необходима скачать "master branch" (git clone http://.../.git),
затем, если вы не помните как называются другие ветки, то проверьте все ветки которые были и существуют в проекте (git branch -a), после чего просто переключитесь на ветку с которой хоите работать (это можно сделать сразу) 
(git checkout remote_branch (где "remote_branch" это ветка в вашем удаленном репозитории)
